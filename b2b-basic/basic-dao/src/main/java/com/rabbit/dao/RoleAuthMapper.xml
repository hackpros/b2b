<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.rabbit.dao.RoleAuthMapper" >
  <resultMap id="BaseResultMap" type="com.rabbit.model.RoleAuth" >
    <id column="ID_" property="id" jdbcType="DECIMAL" />
    <result column="ROLE_CODE" property="roleCode" jdbcType="VARCHAR" />
    <result column="AUTH_CODE" property="authCode" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    ID_, ROLE_CODE, AUTH_CODE
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.rabbit.model.RoleAuthExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BASE.ROLE_AUTH
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from BASE.ROLE_AUTH
    where ID_ = #{id,jdbcType=DECIMAL}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from BASE.ROLE_AUTH
    where ID_ = #{id,jdbcType=DECIMAL}
  </delete>
  <delete id="deleteByExample" parameterType="com.rabbit.model.RoleAuthExample" >
    delete from BASE.ROLE_AUTH
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.rabbit.model.RoleAuth" >
    insert into BASE.ROLE_AUTH (ID_, ROLE_CODE, AUTH_CODE
      )
    values (#{id,jdbcType=DECIMAL}, #{roleCode,jdbcType=VARCHAR}, #{authCode,jdbcType=VARCHAR}
      )
    <selectKey keyProperty="id" order="BEFORE" resultType="long" >
      SELECT BASE.ROLE_AUTH_SEQ.NEXTVAL FROM DUAL
    </selectKey>
  </insert>
  <insert id="insertSelective" parameterType="com.rabbit.model.RoleAuth" >
    insert into BASE.ROLE_AUTH
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID_,
      </if>
      <if test="roleCode != null" >
        ROLE_CODE,
      </if>
      <if test="authCode != null" >
        AUTH_CODE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=DECIMAL},
      </if>
      <if test="roleCode != null" >
        #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="authCode != null" >
        #{authCode,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.rabbit.model.RoleAuthExample" resultType="java.lang.Long" >
    select count(*) from BASE.ROLE_AUTH
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update BASE.ROLE_AUTH
    <set >
      <if test="record.id != null" >
        ID_ = #{record.id,jdbcType=DECIMAL},
      </if>
      <if test="record.roleCode != null" >
        ROLE_CODE = #{record.roleCode,jdbcType=VARCHAR},
      </if>
      <if test="record.authCode != null" >
        AUTH_CODE = #{record.authCode,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update BASE.ROLE_AUTH
    set ID_ = #{record.id,jdbcType=DECIMAL},
      ROLE_CODE = #{record.roleCode,jdbcType=VARCHAR},
      AUTH_CODE = #{record.authCode,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.rabbit.model.RoleAuth" >
    update BASE.ROLE_AUTH
    <set >
      <if test="roleCode != null" >
        ROLE_CODE = #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="authCode != null" >
        AUTH_CODE = #{authCode,jdbcType=VARCHAR},
      </if>
    </set>
    where ID_ = #{id,jdbcType=DECIMAL}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.rabbit.model.RoleAuth" >
    update BASE.ROLE_AUTH
    set ROLE_CODE = #{roleCode,jdbcType=VARCHAR},
      AUTH_CODE = #{authCode,jdbcType=VARCHAR}
    where ID_ = #{id,jdbcType=DECIMAL}
  </update>
  <select id="selectOnPage" resultMap="BaseResultMap" >
    <!-- page --> 
   SELECT * FROM (
   SELECT PAGE.*, ROWNUM AS RN FROM (
    select
    <if test="example.distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from BASE.ROLE_AUTH
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
    <if test="example.orderByClause != null" >
      ORDER BY ${example.orderByClause}
    </if>
     )  PAGE WHERE ROWNUM &lt;=  #{maxResults}  
 )   WHERE RN &gt;#{skipResults}
  </select>
  
   <select id="selectRoleId" resultMap="BaseResultMap" >
	  	select 
	  	<include refid="Base_Column_List" />
	  	from BASE.ROLE_AUTH where ROLE_CODE=#{roleCode,jdbcType=VARCHAR}
   </select>
   
</mapper>